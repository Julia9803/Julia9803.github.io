<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Julia&#39;s BLOG</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2020-06-08T09:01:22.954Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>Julia</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>小彧的本科故事系列一：社团活动</title>
    <link href="http://yoursite.com/2020/06/08/%E5%B0%8F%E5%BD%A7%E7%9A%84%E6%9C%AC%E7%A7%91%E6%95%85%E4%BA%8B%E7%B3%BB%E5%88%97%E4%B8%80%EF%BC%9A%E7%A4%BE%E5%9B%A2%E6%B4%BB%E5%8A%A8/"/>
    <id>http://yoursite.com/2020/06/08/小彧的本科故事系列一：社团活动/</id>
    <published>2020-06-08T08:55:52.000Z</published>
    <updated>2020-06-08T09:01:22.954Z</updated>
    
    <content type="html"><![CDATA[<h2 id="小彧的本科故事系列一：社团活动"><a href="#小彧的本科故事系列一：社团活动" class="headerlink" title="小彧的本科故事系列一：社团活动"></a>小彧的本科故事系列一：社团活动</h2><p>这里是第一篇公众号的推文。建立这个公众号的初衷，是记录一些有意思的事，珍惜生活中的小美好，未来会考虑记录除了生活以外的其他东西。文章会同步更新到我的个人博客，这里→ <a href="https://julia9803.github.io" target="_blank" rel="noopener">https://julia9803.github.io</a> ，原文链接也有。值此临别毕业季，高考四周年纪念，回忆一下我的大学四年。</p><p>四年前的今天，正在紧张刺激的作答高中时代最后一份考卷。2小时后就结束了整个高中生涯。那时候觉得解放了，内心憧憬了千万遍的大学生活，一定是不一样的闪闪发光的人生。而今天此时此刻，就没有那样纯粹的快乐和向往，还要担心疫情、课业和其他的琐事和压力。这就是成长吗？笑。</p><h3 id="01-高考后的选择"><a href="#01-高考后的选择" class="headerlink" title="01 高考后的选择"></a><strong>01</strong> 高考后的选择</h3><p>高考完就被家长带去学驾照了。一次下午烈日当头正在练科目二，就收到了高中qq群密集轰炸的高考成绩。看到自己的高考成绩的时候，内心波动不大，这个成绩不能算太好，也不至于差到无法面对。没过几天就奔赴各个高校在本地的咨询组，询问专业和分数线。后来是从南京大学组那里咨询完，回家的路上接到老师的电话，有几个选择给我。软件工程，社会学，数理大类。那时非常想学金融，没有金融也想入学后转专业到金融。思来想去，决定去学没听过名字也不知道是什么的软件工程吧。后来觉得也许这真的误打误撞做出的一个决定人生发展方向的重要选择了。</p><h3 id="02-文化部和迎新晚会"><a href="#02-文化部和迎新晚会" class="headerlink" title="02 文化部和迎新晚会"></a><strong>02</strong> 文化部和迎新晚会</h3><p>假期里做的最重要的事情大概是一个假期瘦了10斤吧！入学的时候不到一百斤，然后就开始各种买买买，小裙子，jk，Lolita，汉服我都要。魔方社，辩论队，学生会，拉丁舞社，班委我都要参加。和其他专注于学习，不太参与学生活动的大佬相比，我就是完全的反面人物了。在微积分和离散数学中找不到兴趣，但在学生活动中获得了很多成就感。甚至微积分期中考试前一晚还在排练迎新晚会的节目。😁虽然现在看来那段时间损失的GPA是以后很长一段时间的伤痛。</p><p>学生会文化部第一次聚餐是在市中心的风波庄，这个店很有特色。神奇之处是不让点菜，按照人头收费，有没有想吃的菜那得碰运气。有几个非常开朗热情的学长学姐，给大家介绍专业，还学会了部门祖传的特色活动“十五的月亮十六圆”。一顿饭下来，大家熟悉了很多。那时候就觉得，这样的集体真好，在这种其乐融融的氛围下，我愿意为这个组织真心投入。</p><p>接下来，就是一周一次开会，头脑风暴，想节目，大家一起大开脑洞。有沙画舞蹈，光影秀，模仿选秀节目的才艺秀，诗朗诵，软院特色融梗情景剧，还有请校内人气十大歌手，passion街舞社，拉丁舞社的精彩表演。毕竟是大剧场的大场面活动，少说也有八百上千人，这还不算在线观看的，排场肯定要有。特色女装（误）肯定也要有。要说最难的，就是女生人数少了吧。有个节目是跳扇子舞，愣是凑了全部门的女生跟院里积极动员才又找到几个勉强凑足了人数。排节目的时候，最难的是动员大家的积极性。人一多就不容易聚齐，大家都有这样那样的事情要忙。除了排节目，还要制定节目相关的视频和PPT，租演出服，租场地，找场地彩排，联系别的部门设计海报，做特色门票，晚会logo，拉外联，购置具有吸引力的奖品（我在的两年都是iPhone级别的大奖😝），准备抽奖程序（都是我院同学自己写的），写清楚灯光要求，安排话筒组，找到主持人，还要前期校内宣传，贴预告海报，做推送宣传转发抽奖，在4食堂门口摆摊发门票和奖品，控制好整场晚会的预算经费，保留好规范的发票抬头确保能报销。期间还要把控整场晚会准备周期，每个阶段定期审核节目，制定目标，确保节目质量通过审核，整场晚会的每个细节都不能放过，努力做到零失误。踏踏实实参与晚会筹备的每个阶段确实非常锻炼人。</p><p>大一那年主要是参与，因为女生不是很够用，我参加了扇子舞蹈的节目，当了晚会主持人，也作为幕后筹划者办了一个节目。这个节目名字比较文艺，叫造梦空间2.33，介绍语是：浮生几回尝，孤眠梦韶光。（那时候的自己还保留着高中写诗歌带来的文艺😂，而现在早已是思维直来直去的码农）节目内容是一个展示初入大学迷茫的学生VCR+现场以翻转盒子四面的方式引出才艺展示。</p><p>大二那年做了部长以后，就要全权把控晚会的每个细节了。记得很多次开会到深夜商讨节目细节，无数次担心晚会效果不好辜负了大家的努力，备忘录里全都是节目审核情况，奖品，宣传展台，时间轴，半夜三四点还在和羊羊一起制作门票抽奖号码等等等等。但是我从中收获了一段和大家一起为同一个目标奋斗的珍贵革命友谊，很多很多年后，我都不会忘记和大家一起并肩作战的那三四个月。看，这是我们一起办过的晚会！</p><p>这里是16年的迎新晚会link-》<a href="https://www.bilibili.com/video/BV1ix411J7Rx" target="_blank" rel="noopener">https://www.bilibili.com/video/BV1ix411J7Rx</a> </p><p>这里是17年的迎新晚会link-》<a href="https://www.bilibili.com/video/BV1sW411a77r" target="_blank" rel="noopener">https://www.bilibili.com/video/BV1sW411a77r</a></p><p>这里是16年的logo（我觉得最好看的😝）。</p><p><img src="/css/img/logo.png" alt="img"></p><h3 id="03-其他的活动"><a href="#03-其他的活动" class="headerlink" title="03 其他的活动"></a><strong>03 </strong>其他的活动</h3><p>后来呢，又陆陆续续组织参与了其他活动，和商院新传联谊的定向越野，和商院联谊的舞会，校园文化夜，女生节等等。这些都是全部写出来的话也可以如数家珍一样宝贝的回忆。</p><p>在辩论队也认识了很多学长学姐，打了几场唇枪舌剑的激烈辩论。作为心理委员，有一天突然心血来潮创建了软院解忧杂货铺的公众号，给大家建了一个说心里话的树洞qq群，当时有不少同学匿名在群里倾诉心情，不知道有没有积极作用，我也用心开导过一些同学。也许只有大一大二的时候才有这些强烈的执念。如果现在出现一个树洞群，大概我也不会去里面倾诉心情了吧。</p><p>还参加过一个七日情侣的活动，两两一组配对，一起刷题，运动打卡。有一个工作人员根据时长记录积分，积分最高的一组每人都有一个kindle作为奖品。可能初衷是为了让大家速成情侣，或者认识新朋友吧。我就不一样了，和我配对的同学是我院和我很熟悉的女生。我们的目标就是拿kindle😂。在米玲同学的鞭策下，我这个肥宅也能一晚上连跑十公里不带喘气（喘气还是要的哈哈）。也算是本科运动生涯（划掉 这辈子）的巅峰了hhh</p><p>也和室友参加过一个run for green的活动，从大活绕到学校后山跑一圈，算是第一次？见到后山的样子。</p><p>对了，开篇提到的转专业？不存在的，来了就来了，上了贼船，谁都别想走了😁。</p><p>接下来还会讲一讲学校食堂和南京的美食，南大两个校区的回忆，去澳大利亚的所见所闻，申请的攻略和心路历程，预感到会是很大的工程啊，最近也比较忙QAQ，不定期更新吧。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span>(!self.die) &#123;  </span><br><span class="line">  study();  </span><br><span class="line">  enjoy();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;小彧的本科故事系列一：社团活动&quot;&gt;&lt;a href=&quot;#小彧的本科故事系列一：社团活动&quot; class=&quot;headerlink&quot; title=&quot;小彧的本科故事系列一：社团活动&quot;&gt;&lt;/a&gt;小彧的本科故事系列一：社团活动&lt;/h2&gt;&lt;p&gt;这里是第一篇公众号的推文。建立这个公
      
    
    </summary>
    
    
      <category term="琐碎生活" scheme="http://yoursite.com/tags/%E7%90%90%E7%A2%8E%E7%94%9F%E6%B4%BB/"/>
    
  </entry>
  
  <entry>
    <title>年少的诗-73-英雄</title>
    <link href="http://yoursite.com/2020/03/01/%E5%B9%B4%E5%B0%91%E7%9A%84%E8%AF%97-73-%E8%8B%B1%E9%9B%84/"/>
    <id>http://yoursite.com/2020/03/01/年少的诗-73-英雄/</id>
    <published>2020-03-01T08:13:27.000Z</published>
    <updated>2020-03-01T08:26:59.546Z</updated>
    
    <content type="html"><![CDATA[<h2 id="英雄"><a href="#英雄" class="headerlink" title="英雄"></a>英雄</h2><p>人们总喜欢给死去的人冠以各种名誉<br>一轮又一轮的造英雄<br>英雄的形象那么高大<br>仿佛与你我相隔天堑永远不会交汇</p><p>仿佛这样的名誉<br>可以将最后一颗钉子钉入死者的灵柩</p><p>毕竟死者为大<br>真相会伴随着掩埋入地下</p><p>毕竟缅怀英雄的情怀是崇高的<br>人们的心里是光明磊落的</p><p>我站在葬礼上、墓碑前<br>听到、看到伟大而崇高的事迹<br>心想：我可只是个普通人呢</p><p>————————————————</p><p>夙彧 2020.2.7</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;英雄&quot;&gt;&lt;a href=&quot;#英雄&quot; class=&quot;headerlink&quot; title=&quot;英雄&quot;&gt;&lt;/a&gt;英雄&lt;/h2&gt;&lt;p&gt;人们总喜欢给死去的人冠以各种名誉&lt;br&gt;一轮又一轮的造英雄&lt;br&gt;英雄的形象那么高大&lt;br&gt;仿佛与你我相隔天堑永远不会交汇&lt;/p&gt;
&lt;p&gt;仿
      
    
    </summary>
    
    
      <category term="现代诗" scheme="http://yoursite.com/tags/%E7%8E%B0%E4%BB%A3%E8%AF%97/"/>
    
  </entry>
  
  <entry>
    <title>年少的诗-72-远</title>
    <link href="http://yoursite.com/2020/03/01/%E5%B9%B4%E5%B0%91%E7%9A%84%E8%AF%97-72-%E8%BF%9C/"/>
    <id>http://yoursite.com/2020/03/01/年少的诗-72-远/</id>
    <published>2020-03-01T08:13:04.000Z</published>
    <updated>2020-03-01T08:24:52.855Z</updated>
    
    <content type="html"><![CDATA[<h2 id="远"><a href="#远" class="headerlink" title="远"></a>远</h2><p>是否所有美好都因短暂而惊艳<br>是否时光一定要磨尽年少的锋芒<br>可荷香伴着的局促心动缠绵悠长<br>一如幽香的小巷里<br>那位长发姑娘<br>是否大洋彼岸颠倒昼夜<br>一定会剪断红线和悲欢<br>是否年少的欢喜<br>只能化作柴米油盐和沧桑的回忆<br>可少年我分明看到你眼里<br>晶莹剔透的，用心呵护的<br>透过玻璃瓶的清脆阳光<br>我分明看到你披荆斩棘<br>将风雪藏进衣袖<br>只为一遍遍守候那个暖阳的午后<br>水仙开满的路边<br>她缓缓走来<br>氤氲的雾气下你睁不开眼</p><p>————————————————</p><p>夙彧 2020.1.29</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;远&quot;&gt;&lt;a href=&quot;#远&quot; class=&quot;headerlink&quot; title=&quot;远&quot;&gt;&lt;/a&gt;远&lt;/h2&gt;&lt;p&gt;是否所有美好都因短暂而惊艳&lt;br&gt;是否时光一定要磨尽年少的锋芒&lt;br&gt;可荷香伴着的局促心动缠绵悠长&lt;br&gt;一如幽香的小巷里&lt;br&gt;那位长发姑娘&lt;br
      
    
    </summary>
    
    
      <category term="现代诗" scheme="http://yoursite.com/tags/%E7%8E%B0%E4%BB%A3%E8%AF%97/"/>
    
  </entry>
  
  <entry>
    <title>年少的诗-71-野蛮生长</title>
    <link href="http://yoursite.com/2020/03/01/%E5%B9%B4%E5%B0%91%E7%9A%84%E8%AF%97-71-%E9%87%8E%E8%9B%AE%E7%94%9F%E9%95%BF/"/>
    <id>http://yoursite.com/2020/03/01/年少的诗-71-野蛮生长/</id>
    <published>2020-03-01T08:12:41.000Z</published>
    <updated>2020-03-01T08:22:03.455Z</updated>
    
    <content type="html"><![CDATA[<h2 id="野蛮生长"><a href="#野蛮生长" class="headerlink" title="野蛮生长"></a>野蛮生长</h2><p>当月亮闭起双眼<br>浩瀚星河缄默不言<br>不知是哪次浪潮轻轻卷起<br>掠过谁的倒影山盟海誓<br>少年，你可知<br>那个静谧的夜晚小鹿乱撞<br>我的白月光啊<br>轻洒在心间每个角落<br>从此便嵌在一圈圈年轮上<br>野蛮生长</p><p>————————————————</p><p>夙彧 2020.1.29</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;野蛮生长&quot;&gt;&lt;a href=&quot;#野蛮生长&quot; class=&quot;headerlink&quot; title=&quot;野蛮生长&quot;&gt;&lt;/a&gt;野蛮生长&lt;/h2&gt;&lt;p&gt;当月亮闭起双眼&lt;br&gt;浩瀚星河缄默不言&lt;br&gt;不知是哪次浪潮轻轻卷起&lt;br&gt;掠过谁的倒影山盟海誓&lt;br&gt;少年，你可知&lt;br&gt;
      
    
    </summary>
    
    
      <category term="现代诗" scheme="http://yoursite.com/tags/%E7%8E%B0%E4%BB%A3%E8%AF%97/"/>
    
  </entry>
  
  <entry>
    <title>Django搭建python后端</title>
    <link href="http://yoursite.com/2020/02/08/Django%E6%90%AD%E5%BB%BApython%E5%90%8E%E7%AB%AF/"/>
    <id>http://yoursite.com/2020/02/08/Django搭建python后端/</id>
    <published>2020-02-08T06:25:24.000Z</published>
    <updated>2020-02-08T16:58:32.508Z</updated>
    
    <content type="html"><![CDATA[<h3 id="1-在Java中写python"><a href="#1-在Java中写python" class="headerlink" title="1. 在Java中写python"></a>1. 在Java中写python</h3><p>毕设项目需要通过python代码来生成结果，一开始的想法是将python代码嵌入Java后端。于是找到了jython库，是在Java中实现的python。后来运用的时候发现，jython并不支持python原生库以外的第三方库，比如sklearn，scipy。这就比较难受了，所以只能考虑搭建python后端。</p><h3 id="2-Django搭建python后端"><a href="#2-Django搭建python后端" class="headerlink" title="2. Django搭建python后端"></a>2. Django搭建python后端</h3><p>Django是一个比较完善的python框架了，能完美实现一个web项目后端的需求，甚至也可和Vue搭建完整的前后端项目。并且python代码非常简洁，比Java要少不少代码。新建一个Django项目只需在命令行运行以下几行代码便可成功搭建基本的框架。</p><p>创建一个HelloWorld项目：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">django-admin startproject HelloWorld</span><br></pre></td></tr></table></figure><p>HelloWorld为项目容器。</p><p>运行项目：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python manage.py runserver</span><br></pre></td></tr></table></figure><p>此行后可添加端口号，默认为8000</p><h3 id="3-虚拟环境"><a href="#3-虚拟环境" class="headerlink" title="3. 虚拟环境"></a>3. 虚拟环境</h3><p>一开始搭建项目，没有考虑专门建一个虚拟环境，先用的其他项目的环境。后来发现了诡异的bug（Django模块冲突无法安装），于是新建一个虚拟环境。</p><h3 id="4-Django接收跨域请求"><a href="#4-Django接收跨域请求" class="headerlink" title="4. Django接收跨域请求"></a>4. Django接收跨域请求</h3><p><a href="https://blog.csdn.net/wolf131721/article/details/89852652" target="_blank" rel="noopener">https://blog.csdn.net/wolf131721/article/details/89852652</a></p><p>通过修改setting.py中几行代码，过程以上链接，便可接受跨域请求。（PS 我额外修改了ALLOWED_HOSTS = [‘localhost’]这行代码才请求成功）</p><h3 id="5-Django后台管理系统"><a href="#5-Django后台管理系统" class="headerlink" title="5. Django后台管理系统"></a>5. Django后台管理系统</h3><p>值得一提的是，Django有一个自带的后台管理系统，使用非常方便。</p><p>创建一个新账户进行管理：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python manage.py createsuperuser</span><br></pre></td></tr></table></figure><p>接下来根据提示输入用户名，邮箱和密码。</p><p>然后再运行项目可以在以下地址进入admin系统：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://127.0.0.1:8000/admin/</span><br></pre></td></tr></table></figure><p>期待后续能对这一功能进行应用。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;1-在Java中写python&quot;&gt;&lt;a href=&quot;#1-在Java中写python&quot; class=&quot;headerlink&quot; title=&quot;1. 在Java中写python&quot;&gt;&lt;/a&gt;1. 在Java中写python&lt;/h3&gt;&lt;p&gt;毕设项目需要通过python代码
      
    
    </summary>
    
    
      <category term="python" scheme="http://yoursite.com/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>google colab挂载</title>
    <link href="http://yoursite.com/2019/06/20/google-colab%E6%8C%82%E8%BD%BD/"/>
    <id>http://yoursite.com/2019/06/20/google-colab挂载/</id>
    <published>2019-06-20T02:49:08.000Z</published>
    <updated>2019-06-20T03:23:59.988Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-Google-colab是什么"><a href="#1-Google-colab是什么" class="headerlink" title="1. Google colab是什么"></a>1. Google colab是什么</h1><p>首先我们知道，深度学习跑起来非常烧电脑，我曾经因为加了5个epochs电脑直接关机重启。那么不用自己电脑可以用别的什么呢？</p><ol><li>实验室服务器</li><li>Google colab</li></ol><p>如果很不巧，实验室服务器挂了或者你忘了密码上不去了(不是我)，那么推荐用Google colab(需要tz)。有免费的GPU和TPU可以用，操作简单，速度飞快，妈妈再也不用担心我烧坏电脑啦！</p><p>#2. 如何使用</p><p>Google drive 右键新建找到Colab点击，看起来是一个jupyter notebook的页面（此前需要一系列授权操作，在此不赘述）。需要GPU，TPU跑的，点击更改运行时类型，可以换python版本，和GPU，TPU。</p><h1 id="3-如何挂载"><a href="#3-如何挂载" class="headerlink" title="3. 如何挂载"></a>3. 如何挂载</h1><p>有时候不只是单个文件运行，还需要载入生成数据啊，其他代码调用之类的。此时会发现，Google colab需要挂载到自己的Google drive才能顺利的找到其他文件的目录。输入以下代码挂载，提示需要到其他页面获取验证码，输入后查看目录就可以了，如图。温馨提示，挂载操作每次新打开都要重新来一遍。</p><p><img src="/css/img/colab1.png" alt=""></p><p><img src="/css/img/colab2.png" alt=""></p><h1 id="4-享受深度学习的快乐"><a href="#4-享受深度学习的快乐" class="headerlink" title="4. 享受深度学习的快乐"></a>4. 享受深度学习的快乐</h1><p>除了在colab创建python文件以外，还可以本地上传文件夹，然后在colab上运行，非常方便。感谢Google！ </p><p>好了，没什么要说的了。请尽情享受深度学习的快乐吧！</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;1-Google-colab是什么&quot;&gt;&lt;a href=&quot;#1-Google-colab是什么&quot; class=&quot;headerlink&quot; title=&quot;1. Google colab是什么&quot;&gt;&lt;/a&gt;1. Google colab是什么&lt;/h1&gt;&lt;p&gt;首先我们知道，深
      
    
    </summary>
    
    
      <category term="machine learning" scheme="http://yoursite.com/tags/machine-learning/"/>
    
  </entry>
  
  <entry>
    <title>es6中Symbol作用</title>
    <link href="http://yoursite.com/2019/03/22/es6%E4%B8%ADSymbol%E4%BD%9C%E7%94%A8/"/>
    <id>http://yoursite.com/2019/03/22/es6中Symbol作用/</id>
    <published>2019-03-22T05:58:34.000Z</published>
    <updated>2019-03-22T06:11:18.495Z</updated>
    
    <content type="html"><![CDATA[<h3 id="1-Symbol"><a href="#1-Symbol" class="headerlink" title="1. Symbol"></a>1. Symbol</h3><p><strong>symbol是es6出的一种类型，他也是属于原始类型的范畴(string,</strong><br><strong>number, boolean, null, undefined, symbol)</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> name = <span class="built_in">Symbol</span>(<span class="string">'xiaohesong'</span>)</span><br><span class="line"><span class="keyword">typeof</span> name <span class="comment">// 'symbol'</span></span><br><span class="line"><span class="keyword">let</span> obj = &#123;&#125;</span><br><span class="line">obj[name] = <span class="string">'xhs'</span></span><br><span class="line"><span class="built_in">console</span>.log(obj[name]) <span class="comment">//xhs</span></span><br></pre></td></tr></table></figure><h3 id="2-Symbol-for"><a href="#2-Symbol-for" class="headerlink" title="2. Symbol for"></a>2. Symbol for</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> uid = <span class="built_in">Symbol</span>.for(<span class="string">"uid"</span>);</span><br><span class="line"><span class="keyword">let</span> object = &#123;</span><br><span class="line">    [uid]: <span class="string">"12345"</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(object[uid]);       <span class="comment">// "12345"</span></span><br><span class="line"><span class="built_in">console</span>.log(uid);               <span class="comment">// "Symbol(uid)"</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> uid2 = <span class="built_in">Symbol</span>.for(<span class="string">"uid"</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(uid === uid2);      <span class="comment">// true</span></span><br><span class="line"><span class="built_in">console</span>.log(object[uid2]);      <span class="comment">// "12345"</span></span><br><span class="line"><span class="built_in">console</span>.log(uid2);</span><br></pre></td></tr></table></figure><h3 id="3-Symbol-keyfor"><a href="#3-Symbol-keyfor" class="headerlink" title="3. Symbol keyfor"></a>3. Symbol keyfor</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> uid = <span class="built_in">Symbol</span>.for(<span class="string">"uid"</span>);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Symbol</span>.keyFor(uid));    <span class="comment">// "uid"</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> uid2 = <span class="built_in">Symbol</span>.for(<span class="string">"uid"</span>);<span class="comment">//</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Symbol</span>.keyFor(uid2));   <span class="comment">// "uid"</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> uid3 = <span class="built_in">Symbol</span>(<span class="string">"uid"</span>);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Symbol</span>.keyFor(uid3));   <span class="comment">// undefined</span></span><br></pre></td></tr></table></figure><p>全局注册表不存在uid3这个共享的symbol.所以取不出对应的key.由此可见，这个是获取对应的key.</p><h3 id="4-Symbol-在对象中的作用"><a href="#4-Symbol-在对象中的作用" class="headerlink" title="4. Symbol 在对象中的作用"></a>4. Symbol 在对象中的作用</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> obj = &#123;</span><br><span class="line">    name:<span class="string">'name'</span>,</span><br><span class="line">    gender:<span class="string">'male'</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> age = <span class="built_in">Symbol</span>();</span><br><span class="line">obj[age] = <span class="number">6</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">let</span> item <span class="keyword">in</span> obj) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(obj[item]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(obj);</span><br></pre></td></tr></table></figure><p>输出：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">name</span><br><span class="line">male</span><br><span class="line">&#123; <span class="attr">name</span>: <span class="string">'name'</span>, <span class="attr">gender</span>: <span class="string">'male'</span>, [<span class="built_in">Symbol</span>()]: <span class="number">6</span> &#125;</span><br></pre></td></tr></table></figure><p>结论：<em>symbol 保护数据 遍历的时候不输出</em></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;1-Symbol&quot;&gt;&lt;a href=&quot;#1-Symbol&quot; class=&quot;headerlink&quot; title=&quot;1. Symbol&quot;&gt;&lt;/a&gt;1. Symbol&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;symbol是es6出的一种类型，他也是属于原始类型的范畴(string
      
    
    </summary>
    
    
      <category term="JavaScript" scheme="http://yoursite.com/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>区块链共识算法论文转述</title>
    <link href="http://yoursite.com/2019/03/18/%E5%8C%BA%E5%9D%97%E9%93%BE%E5%85%B1%E8%AF%86%E7%AE%97%E6%B3%95%E8%AE%BA%E6%96%87%E8%BD%AC%E8%BF%B0/"/>
    <id>http://yoursite.com/2019/03/18/区块链共识算法论文转述/</id>
    <published>2019-03-18T14:57:20.000Z</published>
    <updated>2019-03-18T15:44:24.961Z</updated>
    
    <content type="html"><![CDATA[<h3 id="《区块链共识算法的发展与展望》论文转述"><a href="#《区块链共识算法的发展与展望》论文转述" class="headerlink" title="《区块链共识算法的发展与展望》论文转述"></a>《区块链共识算法的发展与展望》论文转述</h3><p><img src="/css/img/consensusAlgo/1.Jpeg" alt=""></p><p><img src="/css/img/consensusAlgo/2.Jpeg" alt=""></p><p><img src="/css/img/consensusAlgo/3.Jpeg" alt=""></p><p><img src="/css/img/consensusAlgo/4.Jpeg" alt=""></p><p><img src="/css/img/consensusAlgo/5.Jpeg" alt=""></p><p><img src="/css/img/consensusAlgo/6.Jpeg" alt=""></p><p><img src="/css/img/consensusAlgo/7.Jpeg" alt=""></p><p><img src="/css/img/consensusAlgo/8.Jpeg" alt=""></p><p><img src="/css/img/consensusAlgo/9.Jpeg" alt=""></p><p><img src="/css/img/consensusAlgo/10.Jpeg" alt=""></p><p><img src="/css/img/consensusAlgo/11.Jpeg" alt=""></p><p><img src="/css/img/consensusAlgo/12.Jpeg" alt=""></p><p><img src="/css/img/consensusAlgo/13.Jpeg" alt=""></p><p><img src="/css/img/consensusAlgo/14.Jpeg" alt=""></p><p><img src="/css/img/consensusAlgo/15.Jpeg" alt=""></p><p><img src="/css/img/consensusAlgo/16.Jpeg" alt=""></p><p><img src="/css/img/consensusAlgo/17.Jpeg" alt=""></p><p><img src="/css/img/consensusAlgo/18.Jpeg" alt=""></p><p><img src="/css/img/consensusAlgo/19.Jpeg" alt=""></p><p><img src="/css/img/consensusAlgo/20.Jpeg" alt=""></p><p><img src="/css/img/consensusAlgo/21.Jpeg" alt=""></p><p><img src="/css/img/consensusAlgo/22.Jpeg" alt=""></p><p><img src="/css/img/consensusAlgo/23.Jpeg" alt=""></p><p><img src="/css/img/consensusAlgo/24.Jpeg" alt=""></p><p><img src="/css/img/consensusAlgo/25.Jpeg" alt=""></p><p><img src="/css/img/consensusAlgo/26.Jpeg" alt=""></p><p><img src="/css/img/consensusAlgo/27.Jpeg" alt=""></p><p><img src="/css/img/consensusAlgo/28.Jpeg" alt=""></p><p><img src="/css/img/consensusAlgo/29.Jpeg" alt=""></p><p><img src="/css/img/consensusAlgo/30.Jpeg" alt=""></p><p><img src="/css/img/consensusAlgo/31.Jpeg" alt=""></p><p><img src="/css/img/consensusAlgo/32.Jpeg" alt=""></p><p><img src="/css/img/consensusAlgo/33.Jpeg" alt=""></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;《区块链共识算法的发展与展望》论文转述&quot;&gt;&lt;a href=&quot;#《区块链共识算法的发展与展望》论文转述&quot; class=&quot;headerlink&quot; title=&quot;《区块链共识算法的发展与展望》论文转述&quot;&gt;&lt;/a&gt;《区块链共识算法的发展与展望》论文转述&lt;/h3&gt;&lt;p&gt;&lt;i
      
    
    </summary>
    
    
      <category term="Blockchain" scheme="http://yoursite.com/tags/Blockchain/"/>
    
  </entry>
  
  <entry>
    <title>js中this用法</title>
    <link href="http://yoursite.com/2019/03/18/js%E4%B8%ADthis%E7%94%A8%E6%B3%95/"/>
    <id>http://yoursite.com/2019/03/18/js中this用法/</id>
    <published>2019-03-18T10:09:05.000Z</published>
    <updated>2019-03-18T10:13:49.111Z</updated>
    
    <content type="html"><![CDATA[<h3 id="this-永远指向调用他的对象"><a href="#this-永远指向调用他的对象" class="headerlink" title="this 永远指向调用他的对象"></a>this 永远指向调用他的对象</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">a</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> user = <span class="string">"julia98"</span>;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.user); <span class="comment">//undefined</span></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>); <span class="comment">//Window</span></span><br><span class="line">&#125;</span><br><span class="line">a();</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> o = &#123;</span><br><span class="line">    user:<span class="string">"julia98"</span>,</span><br><span class="line">    fn:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="keyword">this</span>.user);  <span class="comment">//julia98</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">o.fn();</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> o = &#123;</span><br><span class="line">    a:<span class="number">10</span>,</span><br><span class="line">    b:&#123;</span><br><span class="line">        a:<span class="number">12</span>,</span><br><span class="line">        fn:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="keyword">this</span>.a); <span class="comment">//12</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">o.b.fn();</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> o = &#123;</span><br><span class="line">    a:<span class="number">10</span>,</span><br><span class="line">    b:&#123;</span><br><span class="line">        <span class="comment">// a:12,</span></span><br><span class="line">        fn:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="keyword">this</span>.a); <span class="comment">//undefined</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">o.b.fn();</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> o = &#123;</span><br><span class="line">    a:<span class="number">10</span>,</span><br><span class="line">    b:&#123;</span><br><span class="line">        a:<span class="number">12</span>,</span><br><span class="line">        fn:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="keyword">this</span>.a); <span class="comment">//undefined</span></span><br><span class="line">            <span class="built_in">console</span>.log(<span class="keyword">this</span>); <span class="comment">//window</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> j = o.b.fn;</span><br><span class="line">j();</span><br></pre></td></tr></table></figure><p>本来调用fn的是b，结果上述操作是直接执行了fn，所以指向window</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;this-永远指向调用他的对象&quot;&gt;&lt;a href=&quot;#this-永远指向调用他的对象&quot; class=&quot;headerlink&quot; title=&quot;this 永远指向调用他的对象&quot;&gt;&lt;/a&gt;this 永远指向调用他的对象&lt;/h3&gt;&lt;figure class=&quot;highli
      
    
    </summary>
    
    
      <category term="JavaScript" scheme="http://yoursite.com/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>js继承的四种方法</title>
    <link href="http://yoursite.com/2019/03/17/js%E7%BB%A7%E6%89%BF%E7%9A%84%E5%9B%9B%E7%A7%8D%E6%96%B9%E6%B3%95/"/>
    <id>http://yoursite.com/2019/03/17/js继承的四种方法/</id>
    <published>2019-03-17T07:54:34.000Z</published>
    <updated>2019-03-17T08:01:09.048Z</updated>
    
    <content type="html"><![CDATA[<h3 id="1-原型链继承"><a href="#1-原型链继承" class="headerlink" title="1. 原型链继承"></a>1. 原型链继承</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Father</span>(<span class="params">name</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.name = name;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Father.prototype.sayName = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"name is "</span> + <span class="keyword">this</span>.name);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> father = <span class="keyword">new</span> Father(<span class="string">"a"</span>);</span><br><span class="line">father.sayName();</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Child</span>(<span class="params">name</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.name = name;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Child.prototype = <span class="keyword">new</span> Father();</span><br><span class="line"><span class="keyword">var</span> child = <span class="keyword">new</span> Child(<span class="string">"c"</span>);</span><br><span class="line">child.sayName();</span><br></pre></td></tr></table></figure><p>输出：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">name is a</span><br><span class="line">name is c</span><br></pre></td></tr></table></figure><h3 id="2-通过-call-apply"><a href="#2-通过-call-apply" class="headerlink" title="2. 通过 call() apply()"></a>2. 通过 call() apply()</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Father</span>(<span class="params">name</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.name = name;</span><br><span class="line">    <span class="keyword">this</span>.sayName = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">"name is "</span> + <span class="keyword">this</span>.name);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Child</span>(<span class="params">name,age</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// Father.call(this,name);</span></span><br><span class="line">    Father.apply(<span class="keyword">this</span>,[name]);</span><br><span class="line">    <span class="keyword">this</span>.age = age;</span><br><span class="line">    <span class="keyword">this</span>.sayAge = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">"age is "</span> + <span class="keyword">this</span>.age);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> child = <span class="keyword">new</span> Child(<span class="string">"c"</span>,<span class="string">"21"</span>);</span><br><span class="line">child.sayName();</span><br><span class="line">child.sayAge();</span><br></pre></td></tr></table></figure><p>输出：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">name is c</span><br><span class="line">age is 21</span><br></pre></td></tr></table></figure><h3 id="3-原型链和-call-apply-混合"><a href="#3-原型链和-call-apply-混合" class="headerlink" title="3. 原型链和 call() apply() 混合"></a>3. 原型链和 call() apply() 混合</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * sayAge 两种方法都可以</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Father</span>(<span class="params">name</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.name = name;</span><br><span class="line">&#125;</span><br><span class="line">Father.prototype.sayName = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"name is "</span> + <span class="keyword">this</span>.name);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Child</span>(<span class="params">name,age</span>) </span>&#123;</span><br><span class="line">    Father.call(<span class="keyword">this</span>,name);</span><br><span class="line">    <span class="keyword">this</span>.age = age;</span><br><span class="line">    <span class="comment">// this.sayAge = function() &#123;</span></span><br><span class="line">    <span class="comment">//     console.log("age is " + this.age);</span></span><br><span class="line">    <span class="comment">// &#125;</span></span><br><span class="line">&#125;</span><br><span class="line">Child.prototype = <span class="keyword">new</span> Father();</span><br><span class="line"></span><br><span class="line">Child.prototype.sayAge = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"age is "</span> + <span class="keyword">this</span>.age);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> child = <span class="keyword">new</span> Child(<span class="string">"c"</span>,<span class="number">21</span>);</span><br><span class="line">child.sayName();</span><br><span class="line">child.sayAge();</span><br></pre></td></tr></table></figure><p>输出：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">name is c</span><br><span class="line">age is 21</span><br></pre></td></tr></table></figure><h3 id="4-对象冒充"><a href="#4-对象冒充" class="headerlink" title="4. 对象冒充"></a>4. 对象冒充</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Father</span>(<span class="params">name</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.name = name;</span><br><span class="line">    <span class="keyword">this</span>.sayName = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">"name is "</span> + <span class="keyword">this</span>.name);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Child</span>(<span class="params">name</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.child = Father;</span><br><span class="line">    <span class="keyword">this</span>.child(name);</span><br><span class="line">    <span class="keyword">delete</span> <span class="keyword">this</span>.child;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> child = <span class="keyword">new</span> Child(<span class="string">"c"</span>);</span><br><span class="line">child.sayName();</span><br></pre></td></tr></table></figure><p>输出：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">name is c</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;1-原型链继承&quot;&gt;&lt;a href=&quot;#1-原型链继承&quot; class=&quot;headerlink&quot; title=&quot;1. 原型链继承&quot;&gt;&lt;/a&gt;1. 原型链继承&lt;/h3&gt;&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td
      
    
    </summary>
    
    
      <category term="JavaScript" scheme="http://yoursite.com/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode-695 岛屿的最大面积</title>
    <link href="http://yoursite.com/2019/02/13/LeetCode-695-%E5%B2%9B%E5%B1%BF%E7%9A%84%E6%9C%80%E5%A4%A7%E9%9D%A2%E7%A7%AF/"/>
    <id>http://yoursite.com/2019/02/13/LeetCode-695-岛屿的最大面积/</id>
    <published>2019-02-13T11:30:12.000Z</published>
    <updated>2019-02-13T11:35:37.680Z</updated>
    
    <content type="html"><![CDATA[<h3 id="1-题面（一道经典DFS）"><a href="#1-题面（一道经典DFS）" class="headerlink" title="1. 题面（一道经典DFS）"></a>1. 题面（一道经典DFS）</h3><p>给定一个包含了一些 0 和 1的非空二维数组 <code>grid</code> , 一个 <strong>岛屿</strong> 是由四个方向 (水平或垂直) 的 <code>1</code> (代表土地) 构成的组合。你可以假设二维矩阵的四个边缘都被水包围着。</p><p>找到给定的二维数组中最大的岛屿面积。(如果没有岛屿，则返回面积为0。)</p><p><strong>示例 1:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">[[0,0,1,0,0,0,0,1,0,0,0,0,0],</span><br><span class="line"> [0,0,0,0,0,0,0,1,1,1,0,0,0],</span><br><span class="line"> [0,1,1,0,1,0,0,0,0,0,0,0,0],</span><br><span class="line"> [0,1,0,0,1,1,0,0,1,0,1,0,0],</span><br><span class="line"> [0,1,0,0,1,1,0,0,1,1,1,0,0],</span><br><span class="line"> [0,0,0,0,0,0,0,0,0,0,1,0,0],</span><br><span class="line"> [0,0,0,0,0,0,0,1,1,1,0,0,0],</span><br><span class="line"> [0,0,0,0,0,0,0,1,1,0,0,0,0]]</span><br></pre></td></tr></table></figure><p>对于上面这个给定矩阵应返回 <code>6</code>。注意答案不应该是11，因为岛屿只能包含水平或垂直的四个方向的‘1’。</p><p><strong>示例 2:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[[0,0,0,0,0,0,0,0]]</span><br></pre></td></tr></table></figure><p>对于上面这个给定的矩阵, 返回 <code>0</code>。</p><p><strong>注意:</strong> 给定的矩阵<code>grid</code> 的长度和宽度都不超过 50。</p><h3 id="2-解答"><a href="#2-解答" class="headerlink" title="2. 解答"></a>2. 解答</h3><h4 id="Java解答："><a href="#Java解答：" class="headerlink" title="Java解答："></a>Java解答：</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">boolean</span>[][] seen;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span>[][] grid;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">maxAreaOfIsland</span><span class="params">(<span class="keyword">int</span>[][] grid)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.grid = grid;</span><br><span class="line">        seen = <span class="keyword">new</span> <span class="keyword">boolean</span>[grid.length][grid[<span class="number">0</span>].length];</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i&lt;grid.length;i++) &#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>;j&lt;grid[<span class="number">0</span>].length;j++) &#123;</span><br><span class="line">                count = Math.max(count, countMax(i,j));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> count;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">int</span> <span class="title">countMax</span><span class="params">(<span class="keyword">int</span> i,<span class="keyword">int</span> j)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(i&lt;<span class="number">0</span> || i&gt;grid.length-<span class="number">1</span> || j&lt;<span class="number">0</span> || j&gt;grid[<span class="number">0</span>].length-<span class="number">1</span> || grid[i][j] == <span class="number">0</span> || seen[i][j])</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        seen[i][j] = <span class="keyword">true</span>;</span><br><span class="line">        <span class="keyword">return</span> (<span class="number">1</span>+countMax(i,j+<span class="number">1</span>)+countMax(i,j-<span class="number">1</span>)+countMax(i-<span class="number">1</span>,j)+countMax(i+<span class="number">1</span>,j));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="JavaScript解答："><a href="#JavaScript解答：" class="headerlink" title="JavaScript解答："></a>JavaScript解答：</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @param &#123;number[][]&#125; grid</span></span><br><span class="line"><span class="comment"> * @return &#123;number&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> maxAreaOfIsland = <span class="function"><span class="keyword">function</span>(<span class="params">grid</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> count = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">const</span> r = grid.length;</span><br><span class="line">    <span class="keyword">const</span> c = grid[<span class="number">0</span>].length; </span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>;i&lt;grid.length;i++) &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">var</span> j =<span class="number">0</span>;j&lt;grid[<span class="number">0</span>].length;j++) &#123;</span><br><span class="line">            count = <span class="built_in">Math</span>.max(count, countMax(grid,i,j));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> count;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">countMax</span>(<span class="params">grid,i,j</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(i&lt;<span class="number">0</span> || i&gt;r<span class="number">-1</span> || j&lt;<span class="number">0</span> || j&gt;c<span class="number">-1</span> || grid[i][j] == <span class="number">0</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        grid[i][j] = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">return</span> (<span class="number">1</span>+countMax(grid,i+<span class="number">1</span>,j)+countMax(grid,i<span class="number">-1</span>,j)+countMax(grid,i,j+<span class="number">1</span>)+countMax(grid,i,j<span class="number">-1</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;1-题面（一道经典DFS）&quot;&gt;&lt;a href=&quot;#1-题面（一道经典DFS）&quot; class=&quot;headerlink&quot; title=&quot;1. 题面（一道经典DFS）&quot;&gt;&lt;/a&gt;1. 题面（一道经典DFS）&lt;/h3&gt;&lt;p&gt;给定一个包含了一些 0 和 1的非空二维数组 &lt;
      
    
    </summary>
    
    
      <category term="LeetCode" scheme="http://yoursite.com/tags/LeetCode/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode-674 最长连续递增序列</title>
    <link href="http://yoursite.com/2019/02/13/LeetCode-674-%E6%9C%80%E9%95%BF%E8%BF%9E%E7%BB%AD%E9%80%92%E5%A2%9E%E5%BA%8F%E5%88%97/"/>
    <id>http://yoursite.com/2019/02/13/LeetCode-674-最长连续递增序列/</id>
    <published>2019-02-13T11:28:12.000Z</published>
    <updated>2019-02-13T11:33:24.468Z</updated>
    
    <content type="html"><![CDATA[<h3 id="1-题面"><a href="#1-题面" class="headerlink" title="1. 题面"></a>1. 题面</h3><p>给定一个未经排序的整数数组，找到最长且<strong>连续</strong>的的递增序列。</p><p><strong>示例 1:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">输入: [1,3,5,4,7]</span><br><span class="line">输出: 3</span><br><span class="line">解释: 最长连续递增序列是 [1,3,5], 长度为3。</span><br><span class="line">尽管 [1,3,5,7] 也是升序的子序列, 但它不是连续的，因为5和7在原数组里被4隔开。</span><br></pre></td></tr></table></figure><p><strong>示例 2:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入: [2,2,2,2,2]</span><br><span class="line">输出: 1</span><br><span class="line">解释: 最长连续递增序列是 [2], 长度为1。</span><br></pre></td></tr></table></figure><p><strong>注意：</strong>数组长度不会超过10000。</p><h3 id="2-解答"><a href="#2-解答" class="headerlink" title="2. 解答"></a>2. 解答</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">findLengthOfLCIS</span><span class="params">(<span class="keyword">int</span>[] nums)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(nums.length == <span class="number">0</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> max = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(i&lt;nums.length-<span class="number">1</span>) &#123;</span><br><span class="line">        <span class="comment">// 注释掉for循环因为一开始是用for 后来发现while更合理 for的很多次循环都是无意义的 </span></span><br><span class="line">        <span class="comment">// for(int i = 0;i&lt;nums.length-1;i++) &#123;</span></span><br><span class="line">            <span class="keyword">int</span> tmp = i;</span><br><span class="line">            <span class="keyword">int</span> length = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">while</span>(i&lt;nums.length-<span class="number">1</span> &amp;&amp; nums[i]&lt;nums[i+<span class="number">1</span>]) &#123;</span><br><span class="line">                i++;</span><br><span class="line">                length = i-tmp+<span class="number">1</span>;</span><br><span class="line">                <span class="keyword">if</span>(length&gt;max)</span><br><span class="line">                    max = length;</span><br><span class="line">            &#125;</span><br><span class="line">            i++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> max;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;1-题面&quot;&gt;&lt;a href=&quot;#1-题面&quot; class=&quot;headerlink&quot; title=&quot;1. 题面&quot;&gt;&lt;/a&gt;1. 题面&lt;/h3&gt;&lt;p&gt;给定一个未经排序的整数数组，找到最长且&lt;strong&gt;连续&lt;/strong&gt;的的递增序列。&lt;/p&gt;
&lt;p&gt;&lt;strong
      
    
    </summary>
    
    
      <category term="LeetCode" scheme="http://yoursite.com/tags/LeetCode/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode-567 字符串的排列</title>
    <link href="http://yoursite.com/2019/02/13/LeetCode-567-%E5%AD%97%E7%AC%A6%E4%B8%B2%E7%9A%84%E6%8E%92%E5%88%97/"/>
    <id>http://yoursite.com/2019/02/13/LeetCode-567-字符串的排列/</id>
    <published>2019-02-13T11:26:30.000Z</published>
    <updated>2019-02-13T11:33:25.234Z</updated>
    
    <content type="html"><![CDATA[<h3 id="1-题面"><a href="#1-题面" class="headerlink" title="1. 题面"></a>1. 题面</h3><p>给定两个字符串 <strong>s1</strong> 和 <strong>s2</strong>，写一个函数来判断 <strong>s2</strong> 是否包含 <strong>s1</strong> 的排列。</p><p>换句话说，第一个字符串的排列之一是第二个字符串的子串。</p><p><strong>示例1:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入: s1 = &quot;ab&quot; s2 = &quot;eidbaooo&quot;</span><br><span class="line">输出: True</span><br><span class="line">解释: s2 包含 s1 的排列之一 (&quot;ba&quot;).</span><br></pre></td></tr></table></figure><p><strong>示例2:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入: s1= &quot;ab&quot; s2 = &quot;eidboaoo&quot;</span><br><span class="line">输出: False</span><br></pre></td></tr></table></figure><p><strong>注意：</strong></p><ol><li>输入的字符串只包含小写字母</li><li>两个字符串的长度都在 [1, 10,000] 之间</li></ol><h3 id="2-解答"><a href="#2-解答" class="headerlink" title="2. 解答"></a>2. 解答</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">checkInclusion</span><span class="params">(String s1, String s2)</span> </span>&#123;</span><br><span class="line">        String str1 = sort(s1);</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i&lt;s2.length()-s1.length()+<span class="number">1</span>;i++) &#123;</span><br><span class="line">            String tmp = <span class="string">""</span>;</span><br><span class="line">            tmp = s2.substring(i,i+s1.length());</span><br><span class="line">            tmp = sort(tmp);</span><br><span class="line">            <span class="keyword">if</span>(str1.equals(tmp)) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">sort</span><span class="params">(String str)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">char</span>[] a = str.toCharArray();</span><br><span class="line">        Arrays.sort(a);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> String(a);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;1-题面&quot;&gt;&lt;a href=&quot;#1-题面&quot; class=&quot;headerlink&quot; title=&quot;1. 题面&quot;&gt;&lt;/a&gt;1. 题面&lt;/h3&gt;&lt;p&gt;给定两个字符串 &lt;strong&gt;s1&lt;/strong&gt; 和 &lt;strong&gt;s2&lt;/strong&gt;，写一个函数来判断 &lt;
      
    
    </summary>
    
    
      <category term="LeetCode" scheme="http://yoursite.com/tags/LeetCode/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode-215 数组中的第k个最大元素</title>
    <link href="http://yoursite.com/2019/02/13/LeetCode-215-%E6%95%B0%E7%BB%84%E4%B8%AD%E7%9A%84%E7%AC%ACk%E4%B8%AA%E6%9C%80%E5%A4%A7%E5%85%83%E7%B4%A0/"/>
    <id>http://yoursite.com/2019/02/13/LeetCode-215-数组中的第k个最大元素/</id>
    <published>2019-02-13T11:24:07.000Z</published>
    <updated>2019-02-13T11:33:26.720Z</updated>
    
    <content type="html"><![CDATA[<h3 id="1-题面"><a href="#1-题面" class="headerlink" title="1. 题面"></a>1. 题面</h3><p>在未排序的数组中找到第 <strong>k</strong> 个最大的元素。请注意，你需要找的是数组排序后的第 k 个最大的元素，而不是第 k 个不同的元素。</p><p><strong>示例 1:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入: [3,2,1,5,6,4] 和 k = 2</span><br><span class="line">输出: 5</span><br></pre></td></tr></table></figure><p><strong>示例 2:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入: [3,2,3,1,2,4,5,5,6] 和 k = 4</span><br><span class="line">输出: 4</span><br></pre></td></tr></table></figure><h3 id="2-解答"><a href="#2-解答" class="headerlink" title="2. 解答"></a>2. 解答</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">findKthLargest</span><span class="params">(<span class="keyword">int</span>[] nums, <span class="keyword">int</span> k)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 方法一 直接调库快排 AC了</span></span><br><span class="line">        <span class="comment">// Arrays.sort(nums);</span></span><br><span class="line">        <span class="comment">// return nums[nums.length-k];</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 方法二 手写了一个快排 就超时了？？ 也不是很懂</span></span><br><span class="line">        <span class="keyword">return</span> quickSort(nums,<span class="number">0</span>,nums.length-<span class="number">1</span>)[nums.length-k];</span><br><span class="line">        </span><br><span class="line">        &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span>[] quickSort(<span class="keyword">int</span>[] nums,<span class="keyword">int</span> _left,<span class="keyword">int</span> _right) &#123;</span><br><span class="line">        <span class="keyword">int</span> left = _left;</span><br><span class="line">        <span class="keyword">int</span> right = _right;</span><br><span class="line">        <span class="keyword">int</span> tmp = <span class="number">0</span>; <span class="comment">//基准数</span></span><br><span class="line">        <span class="keyword">if</span>(left &lt;= right) &#123;</span><br><span class="line">            <span class="keyword">while</span>(left != right) &#123;</span><br><span class="line">                tmp = nums[left];</span><br><span class="line">                <span class="keyword">while</span>(left &lt; right &amp;&amp; nums[right] &gt; tmp)</span><br><span class="line">                    right --;</span><br><span class="line">                nums[left] = nums[right];</span><br><span class="line">                <span class="keyword">while</span>(left &lt; right &amp;&amp; nums[left] &lt; tmp)</span><br><span class="line">                    left ++;</span><br><span class="line">                nums[right] = nums[left];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        nums[right] = tmp;</span><br><span class="line">        quickSort(nums,_left,left-<span class="number">1</span>);</span><br><span class="line">        quickSort(nums,right+<span class="number">1</span>,_right);</span><br><span class="line">        <span class="keyword">return</span> nums;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;1-题面&quot;&gt;&lt;a href=&quot;#1-题面&quot; class=&quot;headerlink&quot; title=&quot;1. 题面&quot;&gt;&lt;/a&gt;1. 题面&lt;/h3&gt;&lt;p&gt;在未排序的数组中找到第 &lt;strong&gt;k&lt;/strong&gt; 个最大的元素。请注意，你需要找的是数组排序后的第 k 个最
      
    
    </summary>
    
    
      <category term="LeetCode" scheme="http://yoursite.com/tags/LeetCode/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode-206 反转列表</title>
    <link href="http://yoursite.com/2019/02/13/LeetCode-206-%E5%8F%8D%E8%BD%AC%E5%88%97%E8%A1%A8/"/>
    <id>http://yoursite.com/2019/02/13/LeetCode-206-反转列表/</id>
    <published>2019-02-13T11:21:18.000Z</published>
    <updated>2019-02-13T11:33:27.627Z</updated>
    
    <content type="html"><![CDATA[<h3 id="1-题面"><a href="#1-题面" class="headerlink" title="1. 题面"></a>1. 题面</h3><p>反转一个单链表。</p><p><strong>示例:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入: 1-&gt;2-&gt;3-&gt;4-&gt;5-&gt;NULL</span><br><span class="line">输出: 5-&gt;4-&gt;3-&gt;2-&gt;1-&gt;NULL</span><br></pre></td></tr></table></figure><p><strong>进阶:</strong><br>你可以迭代或递归地反转链表。你能否用两种方法解决这道题？</p><h3 id="2-解答"><a href="#2-解答" class="headerlink" title="2. 解答"></a>2. 解答</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"> * public class ListNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     ListNode next;</span></span><br><span class="line"><span class="comment"> *     ListNode(int x) &#123; val = x; &#125;</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> ListNode <span class="title">reverseList</span><span class="params">(ListNode head)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 方法一 暴力遍历链表放入数组 反向生成新链表</span></span><br><span class="line">        <span class="comment">// if(head == null)</span></span><br><span class="line">        <span class="comment">//     return null;</span></span><br><span class="line">        <span class="comment">// List&lt;Integer&gt; list = new ArrayList&lt;Integer&gt;();</span></span><br><span class="line">        <span class="comment">// ListNode curr = head;</span></span><br><span class="line">        <span class="comment">// while(curr != null) &#123;</span></span><br><span class="line">        <span class="comment">//     list.add(curr.val);</span></span><br><span class="line">        <span class="comment">//     curr = curr.next;</span></span><br><span class="line">        <span class="comment">// &#125;</span></span><br><span class="line">        <span class="comment">// ListNode a = new ListNode(list.get(list.size()-1));</span></span><br><span class="line">        <span class="comment">// ListNode rescurr = a;</span></span><br><span class="line">        <span class="comment">// for(int i = list.size()-2;i&gt;=0;i--) &#123;</span></span><br><span class="line">        <span class="comment">//     rescurr.next = new ListNode(list.get(i));</span></span><br><span class="line">        <span class="comment">//     rescurr = rescurr.next;</span></span><br><span class="line">        <span class="comment">// &#125;</span></span><br><span class="line">        <span class="comment">// rescurr.next = null;</span></span><br><span class="line">        <span class="comment">// return a;</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 方法二 iterative way</span></span><br><span class="line">        <span class="comment">// ListNode prev = null;</span></span><br><span class="line">        <span class="comment">// ListNode curr = head;</span></span><br><span class="line">        <span class="comment">// ListNode next = null;</span></span><br><span class="line">        <span class="comment">// while(curr != null) &#123;</span></span><br><span class="line">        <span class="comment">//     next = curr.next;</span></span><br><span class="line">        <span class="comment">//     curr.next = prev;</span></span><br><span class="line">        <span class="comment">//     prev = curr;</span></span><br><span class="line">        <span class="comment">//     curr = next;</span></span><br><span class="line">        <span class="comment">// &#125;</span></span><br><span class="line">        <span class="comment">// return prev;</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 方法三 recursive way</span></span><br><span class="line">        <span class="keyword">if</span>(head == <span class="keyword">null</span> || head.next == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> head;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        ListNode newHead = reverseList(head.next);</span><br><span class="line">        head.next.next = head;</span><br><span class="line">        head.next = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">return</span> newHead;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;1-题面&quot;&gt;&lt;a href=&quot;#1-题面&quot; class=&quot;headerlink&quot; title=&quot;1. 题面&quot;&gt;&lt;/a&gt;1. 题面&lt;/h3&gt;&lt;p&gt;反转一个单链表。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;示例:&lt;/strong&gt;&lt;/p&gt;
&lt;figure class=&quot;high
      
    
    </summary>
    
    
      <category term="LeetCode" scheme="http://yoursite.com/tags/LeetCode/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode-155 最小栈</title>
    <link href="http://yoursite.com/2019/02/13/LeetCode-155-%E6%9C%80%E5%B0%8F%E6%A0%88/"/>
    <id>http://yoursite.com/2019/02/13/LeetCode-155-最小栈/</id>
    <published>2019-02-13T11:20:11.000Z</published>
    <updated>2019-02-13T11:33:29.617Z</updated>
    
    <content type="html"><![CDATA[<h3 id="1-题面"><a href="#1-题面" class="headerlink" title="1. 题面"></a>1. 题面</h3><p>设计一个支持 push，pop，top 操作，并能在常数时间内检索到最小元素的栈。</p><ul><li>push(x) – 将元素 x 推入栈中。</li><li>pop() – 删除栈顶的元素。</li><li>top() – 获取栈顶元素。</li><li>getMin() – 检索栈中的最小元素。</li></ul><p><strong>示例:</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">MinStack minStack = <span class="keyword">new</span> MinStack();</span><br><span class="line">minStack.push(-<span class="number">2</span>);</span><br><span class="line">minStack.push(<span class="number">0</span>);</span><br><span class="line">minStack.push(-<span class="number">3</span>);</span><br><span class="line">minStack.getMin();   --&gt; 返回 -<span class="number">3</span>.</span><br><span class="line">minStack.pop();</span><br><span class="line">minStack.top();      --&gt; 返回 <span class="number">0</span>.</span><br><span class="line">minStack.getMin();   --&gt; 返回 -<span class="number">2</span>.</span><br></pre></td></tr></table></figure><h3 id="2-解答"><a href="#2-解答" class="headerlink" title="2. 解答"></a>2. 解答</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MinStack</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Stack&lt;Integer&gt; s1 = <span class="keyword">new</span> Stack&lt;&gt;();</span><br><span class="line">    <span class="keyword">private</span> Stack&lt;Integer&gt; s2 = <span class="keyword">new</span> Stack&lt;&gt;();</span><br><span class="line">    <span class="comment">/** initialize your data structure here. */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MinStack</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">push</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">        s1.push(x);</span><br><span class="line">        <span class="keyword">if</span>(s2.isEmpty() || s2.peek()&gt;=x)</span><br><span class="line">            s2.push(x);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">pop</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> x = s1.pop();</span><br><span class="line">        <span class="keyword">if</span>(s2.peek() == x)</span><br><span class="line">            s2.pop();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">top</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> s1.peek();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getMin</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> s2.peek();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Your MinStack object will be instantiated and called as such:</span></span><br><span class="line"><span class="comment"> * MinStack obj = new MinStack();</span></span><br><span class="line"><span class="comment"> * obj.push(x);</span></span><br><span class="line"><span class="comment"> * obj.pop();</span></span><br><span class="line"><span class="comment"> * int param_3 = obj.top();</span></span><br><span class="line"><span class="comment"> * int param_4 = obj.getMin();</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;1-题面&quot;&gt;&lt;a href=&quot;#1-题面&quot; class=&quot;headerlink&quot; title=&quot;1. 题面&quot;&gt;&lt;/a&gt;1. 题面&lt;/h3&gt;&lt;p&gt;设计一个支持 push，pop，top 操作，并能在常数时间内检索到最小元素的栈。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;push(
      
    
    </summary>
    
    
      <category term="LeetCode" scheme="http://yoursite.com/tags/LeetCode/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode-151 翻转字符串里的单词</title>
    <link href="http://yoursite.com/2019/02/13/LeetCode-151-%E7%BF%BB%E8%BD%AC%E5%AD%97%E7%AC%A6%E4%B8%B2%E9%87%8C%E7%9A%84%E5%8D%95%E8%AF%8D/"/>
    <id>http://yoursite.com/2019/02/13/LeetCode-151-翻转字符串里的单词/</id>
    <published>2019-02-13T11:19:08.000Z</published>
    <updated>2019-02-13T11:33:30.513Z</updated>
    
    <content type="html"><![CDATA[<h3 id="1-题面"><a href="#1-题面" class="headerlink" title="1. 题面"></a>1. 题面</h3><p>给定一个字符串，逐个翻转字符串中的每个单词。</p><p><strong>示例:</strong>  </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入: &quot;the sky is blue&quot;,</span><br><span class="line">输出: &quot;blue is sky the&quot;.</span><br></pre></td></tr></table></figure><p><strong>说明:</strong></p><ul><li>无空格字符构成一个单词。</li><li>输入字符串可以在前面或者后面包含多余的空格，但是反转后的字符不能包括。</li><li>如果两个单词间有多余的空格，将反转后单词间的空格减少到只含一个。</li></ul><p><strong>进阶:</strong> 请选用C语言的用户尝试使用 <em>O</em>(1) 空间复杂度的原地解法。</p><h3 id="2-解答"><a href="#2-解答" class="headerlink" title="2. 解答"></a>2. 解答</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">reverseWords</span><span class="params">(String s)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">while</span>(s.indexOf(<span class="string">"  "</span>) != -<span class="number">1</span>) &#123;</span><br><span class="line">            s = s.replace(<span class="string">"  "</span>,<span class="string">" "</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        String[] strs = s.trim().split(<span class="string">" "</span>);</span><br><span class="line">        String res = <span class="string">""</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = strs.length-<span class="number">1</span>;i&gt;=<span class="number">0</span>;i--) &#123;</span><br><span class="line">            <span class="keyword">if</span>(i == <span class="number">0</span>)</span><br><span class="line">                res += strs[i];</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                res += strs[i] + <span class="string">" "</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;1-题面&quot;&gt;&lt;a href=&quot;#1-题面&quot; class=&quot;headerlink&quot; title=&quot;1. 题面&quot;&gt;&lt;/a&gt;1. 题面&lt;/h3&gt;&lt;p&gt;给定一个字符串，逐个翻转字符串中的每个单词。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;示例:&lt;/strong&gt;  &lt;/p&gt;
&lt;fi
      
    
    </summary>
    
    
      <category term="LeetCode" scheme="http://yoursite.com/tags/LeetCode/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode-146 LRU缓存机制</title>
    <link href="http://yoursite.com/2019/02/13/LeetCode-146-LRU%E7%BC%93%E5%AD%98%E6%9C%BA%E5%88%B6/"/>
    <id>http://yoursite.com/2019/02/13/LeetCode-146-LRU缓存机制/</id>
    <published>2019-02-13T11:17:22.000Z</published>
    <updated>2019-02-13T11:33:31.300Z</updated>
    
    <content type="html"><![CDATA[<h3 id="1-题面"><a href="#1-题面" class="headerlink" title="1. 题面"></a>1. 题面</h3><p>运用你所掌握的数据结构，设计和实现一个  <a href="https://baike.baidu.com/item/LRU" target="_blank" rel="noopener">LRU (最近最少使用) 缓存机制</a>。它应该支持以下操作： 获取数据 <code>get</code> 和 写入数据 <code>put</code> 。</p><p>获取数据 <code>get(key)</code> - 如果密钥 (key) 存在于缓存中，则获取密钥的值（总是正数），否则返回 -1。<br>写入数据 <code>put(key, value)</code> - 如果密钥不存在，则写入其数据值。当缓存容量达到上限时，它应该在写入新数据之前删除最近最少使用的数据值，从而为新的数据值留出空间。</p><p><strong>进阶:</strong></p><p>你是否可以在 <strong>O(1)</strong> 时间复杂度内完成这两种操作？</p><p><strong>示例:</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">LRUCache cache = <span class="keyword">new</span> LRUCache( <span class="number">2</span> <span class="comment">/* 缓存容量 */</span> );</span><br><span class="line"></span><br><span class="line">cache.put(<span class="number">1</span>, <span class="number">1</span>);</span><br><span class="line">cache.put(<span class="number">2</span>, <span class="number">2</span>);</span><br><span class="line">cache.get(<span class="number">1</span>);       <span class="comment">// 返回  1</span></span><br><span class="line">cache.put(<span class="number">3</span>, <span class="number">3</span>);    <span class="comment">// 该操作会使得密钥 2 作废</span></span><br><span class="line">cache.get(<span class="number">2</span>);       <span class="comment">// 返回 -1 (未找到)</span></span><br><span class="line">cache.put(<span class="number">4</span>, <span class="number">4</span>);    <span class="comment">// 该操作会使得密钥 1 作废</span></span><br><span class="line">cache.get(<span class="number">1</span>);       <span class="comment">// 返回 -1 (未找到)</span></span><br><span class="line">cache.get(<span class="number">3</span>);       <span class="comment">// 返回  3</span></span><br><span class="line">cache.get(<span class="number">4</span>);       <span class="comment">// 返回  4</span></span><br></pre></td></tr></table></figure><h3 id="2-解答"><a href="#2-解答" class="headerlink" title="2. 解答"></a>2. 解答</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">LRUCache</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> capacity;</span><br><span class="line">    <span class="keyword">private</span> Node head = <span class="keyword">new</span> Node(<span class="number">0</span>,<span class="number">0</span>);</span><br><span class="line">    <span class="keyword">private</span> Node tail = <span class="keyword">new</span> Node(<span class="number">0</span>,<span class="number">0</span>);</span><br><span class="line">    Map&lt;Integer,Node&gt; map = <span class="keyword">new</span> HashMap();</span><br><span class="line">     </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">LRUCache</span><span class="params">(<span class="keyword">int</span> capacity)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.capacity = capacity;</span><br><span class="line">        head.post = tail;</span><br><span class="line">        tail.pre = head;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">get</span><span class="params">(<span class="keyword">int</span> key)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(map.containsKey(key)) &#123;</span><br><span class="line">            Node node = map.get(key);</span><br><span class="line">            delete(node);</span><br><span class="line">            insert(node);</span><br><span class="line">            <span class="keyword">return</span> node.value;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">        &#125;     </span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">put</span><span class="params">(<span class="keyword">int</span> key, <span class="keyword">int</span> value)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(map.containsKey(key)) &#123;</span><br><span class="line">            Node node = map.get(key);</span><br><span class="line">            delete(node);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(map.size() == capacity) &#123;</span><br><span class="line">            delete(tail.pre);</span><br><span class="line">        &#125;</span><br><span class="line">        insert(<span class="keyword">new</span> Node(key,value));</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">delete</span><span class="params">(Node node)</span> </span>&#123;</span><br><span class="line">        map.remove(node.key);</span><br><span class="line">        Node tmp = node.pre;</span><br><span class="line">        tmp.post = node.post;</span><br><span class="line">        node.post.pre = tmp;  </span><br><span class="line">        <span class="comment">// node.pre.post = node.post;</span></span><br><span class="line">        <span class="comment">// node.post.pre = node.pre;</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">insert</span><span class="params">(Node node)</span> </span>&#123;</span><br><span class="line">        map.put(node.key,node);</span><br><span class="line">        node.pre = head;</span><br><span class="line">        node.post = head.post;</span><br><span class="line">        node.post.pre = node;</span><br><span class="line">        head.post = node;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Node</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> key,value;</span><br><span class="line">        Node pre,post;</span><br><span class="line">        Node(<span class="keyword">int</span> _key,<span class="keyword">int</span> _value) &#123;</span><br><span class="line">            key = _key;</span><br><span class="line">            value = _value;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Your LRUCache object will be instantiated and called as such:</span></span><br><span class="line"><span class="comment"> * LRUCache obj = new LRUCache(capacity);</span></span><br><span class="line"><span class="comment"> * int param_1 = obj.get(key);</span></span><br><span class="line"><span class="comment"> * obj.put(key,value);</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;1-题面&quot;&gt;&lt;a href=&quot;#1-题面&quot; class=&quot;headerlink&quot; title=&quot;1. 题面&quot;&gt;&lt;/a&gt;1. 题面&lt;/h3&gt;&lt;p&gt;运用你所掌握的数据结构，设计和实现一个  &lt;a href=&quot;https://baike.baidu.com/item/L
      
    
    </summary>
    
    
      <category term="LeetCode" scheme="http://yoursite.com/tags/LeetCode/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode-128 最长连续序列</title>
    <link href="http://yoursite.com/2019/02/13/LeetCode-128-%E6%9C%80%E9%95%BF%E8%BF%9E%E7%BB%AD%E5%BA%8F%E5%88%97/"/>
    <id>http://yoursite.com/2019/02/13/LeetCode-128-最长连续序列/</id>
    <published>2019-02-13T11:13:53.000Z</published>
    <updated>2019-02-13T11:33:32.054Z</updated>
    
    <content type="html"><![CDATA[<h3 id="1-题面"><a href="#1-题面" class="headerlink" title="1. 题面"></a>1. 题面</h3><p>给定一个未排序的整数数组，找出最长连续序列的长度。</p><p>要求算法的时间复杂度为 <em>O(n)</em>。</p><p><strong>示例:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入: [100, 4, 200, 1, 3, 2]</span><br><span class="line">输出: 4</span><br><span class="line">解释: 最长连续序列是 [1, 2, 3, 4]。它的长度为 4。</span><br></pre></td></tr></table></figure><h3 id="2-解答"><a href="#2-解答" class="headerlink" title="2. 解答"></a>2. 解答</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">longestConsecutive</span><span class="params">(<span class="keyword">int</span>[] nums)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 以下做法是不对的，因为没有考虑到数组中从在两个相同的数这种情况，相比较还是用for循环做更合适</span></span><br><span class="line"><span class="comment">//         if(nums.length == 0)</span></span><br><span class="line"><span class="comment">//             return 0;</span></span><br><span class="line">        </span><br><span class="line"><span class="comment">//         Arrays.sort(nums);</span></span><br><span class="line"><span class="comment">//         int i = 0;</span></span><br><span class="line"><span class="comment">//         int max = 1;</span></span><br><span class="line"><span class="comment">//         while(i&lt;nums.length-1) &#123;</span></span><br><span class="line"><span class="comment">//             int len = 1;</span></span><br><span class="line"><span class="comment">//             while(i &lt; nums.length-1 &amp;&amp; nums[i+1] == (nums[i]+1)) &#123;</span></span><br><span class="line"><span class="comment">//                 i++;</span></span><br><span class="line"><span class="comment">//                 len++;</span></span><br><span class="line"><span class="comment">//             &#125;</span></span><br><span class="line"><span class="comment">//             max = Math.max(max,len);</span></span><br><span class="line"><span class="comment">//             i++;</span></span><br><span class="line"><span class="comment">//         &#125;</span></span><br><span class="line"> </span><br><span class="line">        <span class="comment">// 方法一 以下做法复杂度取决于sort: O(nlogn) for循环复杂度为O(n)</span></span><br><span class="line"><span class="comment">//         if(nums.length == 0)</span></span><br><span class="line"><span class="comment">//             return 0;</span></span><br><span class="line">        </span><br><span class="line"><span class="comment">//         Arrays.sort(nums);</span></span><br><span class="line"><span class="comment">//         int max = 1;</span></span><br><span class="line"><span class="comment">//         int curr = 1;</span></span><br><span class="line"><span class="comment">//         for(int i = 0;i&lt;nums.length-1;i++) &#123;</span></span><br><span class="line"><span class="comment">//             if(nums[i+1] != nums[i]) &#123;</span></span><br><span class="line"><span class="comment">//                 if(nums[i+1] == (nums[i] + 1))</span></span><br><span class="line"><span class="comment">//                     curr++;</span></span><br><span class="line"><span class="comment">//                 else &#123;</span></span><br><span class="line"><span class="comment">//                     max = Math.max(max,curr);</span></span><br><span class="line"><span class="comment">//                     curr = 1;</span></span><br><span class="line"><span class="comment">//                 &#125;</span></span><br><span class="line"><span class="comment">//             &#125;</span></span><br><span class="line"><span class="comment">//         &#125;</span></span><br><span class="line"><span class="comment">//         max = Math.max(max,curr);</span></span><br><span class="line"><span class="comment">//         return max;</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 方法二</span></span><br><span class="line">        <span class="keyword">if</span>(nums.length == <span class="number">0</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> max = <span class="number">1</span>;</span><br><span class="line">        Set&lt;Integer&gt; set = <span class="keyword">new</span> HashSet&lt;Integer&gt;();</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i:nums)</span><br><span class="line">            set.add(i);</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> num:set) &#123;</span><br><span class="line">            <span class="keyword">if</span>(!set.contains(num-<span class="number">1</span>)) &#123;</span><br><span class="line">                <span class="keyword">int</span> len = <span class="number">1</span>;</span><br><span class="line">                <span class="keyword">int</span> currnum = num+<span class="number">1</span>;</span><br><span class="line">                <span class="keyword">while</span>(set.contains(currnum)) &#123;</span><br><span class="line">                    len++;</span><br><span class="line">                    currnum++;</span><br><span class="line">                &#125;</span><br><span class="line">                max = Math.max(max, len);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> max;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;1-题面&quot;&gt;&lt;a href=&quot;#1-题面&quot; class=&quot;headerlink&quot; title=&quot;1. 题面&quot;&gt;&lt;/a&gt;1. 题面&lt;/h3&gt;&lt;p&gt;给定一个未排序的整数数组，找出最长连续序列的长度。&lt;/p&gt;
&lt;p&gt;要求算法的时间复杂度为 &lt;em&gt;O(n)&lt;/em&gt;。&lt;
      
    
    </summary>
    
    
      <category term="LeetCode" scheme="http://yoursite.com/tags/LeetCode/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode-122 买卖股票的最佳时机2</title>
    <link href="http://yoursite.com/2019/02/13/LeetCode-122-%E4%B9%B0%E5%8D%96%E8%82%A1%E7%A5%A8%E7%9A%84%E6%9C%80%E4%BD%B3%E6%97%B6%E6%9C%BA2/"/>
    <id>http://yoursite.com/2019/02/13/LeetCode-122-买卖股票的最佳时机2/</id>
    <published>2019-02-13T11:12:47.000Z</published>
    <updated>2019-02-13T11:33:32.848Z</updated>
    
    <content type="html"><![CDATA[<h3 id="1-题面"><a href="#1-题面" class="headerlink" title="1. 题面"></a>1. 题面</h3><p>给定一个数组，它的第 <em>i</em> 个元素是一支给定股票第 <em>i</em> 天的价格。</p><p>设计一个算法来计算你所能获取的最大利润。你可以尽可能地完成更多的交易（多次买卖一支股票）。</p><p><strong>注意：</strong>你不能同时参与多笔交易（你必须在再次购买前出售掉之前的股票）。</p><p><strong>示例 1:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">输入: [7,1,5,3,6,4]</span><br><span class="line">输出: 7</span><br><span class="line">解释: 在第 2 天（股票价格 = 1）的时候买入，在第 3 天（股票价格 = 5）的时候卖出, 这笔交易所能获得利润 = 5-1 = 4 。</span><br><span class="line">     随后，在第 4 天（股票价格 = 3）的时候买入，在第 5 天（股票价格 = 6）的时候卖出, 这笔交易所能获得利润 = 6-3 = 3 。</span><br></pre></td></tr></table></figure><p><strong>示例 2:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">输入: [1,2,3,4,5]</span><br><span class="line">输出: 4</span><br><span class="line">解释: 在第 1 天（股票价格 = 1）的时候买入，在第 5 天 （股票价格 = 5）的时候卖出, 这笔交易所能获得利润 = 5-1 = 4 。</span><br><span class="line">     注意你不能在第 1 天和第 2 天接连购买股票，之后再将它们卖出。</span><br><span class="line">     因为这样属于同时参与了多笔交易，你必须在再次购买前出售掉之前的股票。</span><br></pre></td></tr></table></figure><p><strong>示例 3:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入: [7,6,4,3,1]</span><br><span class="line">输出: 0</span><br><span class="line">解释: 在这种情况下, 没有交易完成, 所以最大利润为 0。</span><br></pre></td></tr></table></figure><h3 id="2-解答"><a href="#2-解答" class="headerlink" title="2. 解答"></a>2. 解答</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">maxProfit</span><span class="params">(<span class="keyword">int</span>[] prices)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(prices.length == <span class="number">0</span>) </span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> peek = prices[<span class="number">0</span>];</span><br><span class="line">        <span class="keyword">int</span> valley = prices[<span class="number">0</span>];</span><br><span class="line">        <span class="keyword">int</span> res = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(i&lt;prices.length-<span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">while</span>(i&lt;prices.length-<span class="number">1</span> &amp;&amp; prices[i+<span class="number">1</span>] &lt;= prices[i])</span><br><span class="line">                i++;</span><br><span class="line">            valley = prices[i];</span><br><span class="line">            <span class="keyword">while</span>(i&lt;prices.length-<span class="number">1</span> &amp;&amp; prices[i+<span class="number">1</span>] &gt;= prices[i])</span><br><span class="line">                i++;</span><br><span class="line">            peek = prices[i];</span><br><span class="line">            System.out.println(peek - valley);</span><br><span class="line">            res += peek - valley;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;1-题面&quot;&gt;&lt;a href=&quot;#1-题面&quot; class=&quot;headerlink&quot; title=&quot;1. 题面&quot;&gt;&lt;/a&gt;1. 题面&lt;/h3&gt;&lt;p&gt;给定一个数组，它的第 &lt;em&gt;i&lt;/em&gt; 个元素是一支给定股票第 &lt;em&gt;i&lt;/em&gt; 天的价格。&lt;/p&gt;
&lt;p&gt;设计
      
    
    </summary>
    
    
      <category term="LeetCode" scheme="http://yoursite.com/tags/LeetCode/"/>
    
  </entry>
  
</feed>
